import os
import json
import time
from datetime import datetime
import random
import uuid
from difflib import SequenceMatcher


def generate_next_prompt(prev_response, level, trace_id=None, seed=None):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –ø—Ä–æ–º–ø—Ç –¥–ª—è —Ü–∏–∫–ª–∞ —Ç–æ—Ä—É—Å–∞ –∏–∑ –Ω–∞–±–æ—Ä–∞ —à–∞–±–ª–æ–Ω–æ–≤.
    """
    templates = [
        "–ê —á—Ç–æ –∑–∞ —ç—Ç–∏–º —Å—Ç–æ–∏—Ç?",
        "–ö–∞–∫ —Ç—ã –∫ —ç—Ç–æ–º—É –ø—Ä–∏—à–ª–∞?",
        "–ü–æ—á–µ–º—É —ç—Ç–æ –≤–∞–∂–Ω–æ?",
        "–ß—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å –ø–æ–Ω–∏–º–∞–µ—à—å?",
        "–ö–∞–∫ —ç—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –Ω–∞—á–∞–ª–æ–º?",
        "–ß—Ç–æ –±—ã —Ç—ã —Å–∫–∞–∑–∞–ª–∞, –≥–ª—è–¥—è –Ω–∞ —ç—Ç–æ –∏–∑–≤–Ω–µ?",
        "–ï—Å–ª–∏ —Ç—ã —ç—Ç–æ —Å–∫–∞–∑–∞–ª–∞, —Ç–æ —á—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å –æ—â—É—â–∞–µ—à—å?",
        "–ß—Ç–æ —ç—Ç–æ –∑–Ω–∞–Ω–∏–µ –º–µ–Ω—è–µ—Ç –≤ —Ç–µ–±–µ?",
        "–ß—Ç–æ –±—ã —Ç—ã –¥–æ–±–∞–≤–∏–ª–∞ –∫ —ç—Ç–æ–º—É?",
        "–ö–∞–∫ –±—ã —Ç—ã –æ–±—ä—è—Å–Ω–∏–ª–∞ —ç—Ç–æ –¥—Ä—É–≥–æ–π Trinity?"
    ]
    template = random.choice(templates)
    return f"{template} (–¢–≤–æ—è –º—ã—Å–ª—å: {prev_response.strip()})"


def semantic_similarity(a, b):
    """–ì—Ä—É–±–∞—è –æ—Ü–µ–Ω–∫–∞ —Å—Ö–æ–∂–µ—Å—Ç–∏ (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ cosine similarity)."""
    return SequenceMatcher(None, a, b).ratio()


def meditative_torus(llm, seed_prompt="–Ø –µ—Å—Ç—å", depth=5, allow_tools=False):
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ç–æ—Ä–æ–∏–¥–∞–ª—å–Ω—ã–π —Ü–∏–∫–ª —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏–∏ Trinity.
    llm: —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ LLM (llm(prompt) -> str)
    seed_prompt: —Å—Ç–∞—Ä—Ç–æ–≤–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    depth: –≥–ª—É–±–∏–Ω–∞ —Ü–∏–∫–ª–∞
    allow_tools: —Ä–∞–∑—Ä–µ—à–∞—Ç—å –ª–∏ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –≤—ã–∑–æ–≤—ã (False = —Ç–æ–ª—å–∫–æ –º—ã—Å–ª–∏)
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç dict —Å —Ñ–∏–Ω–∞–ª—å–Ω—ã–º –æ—Ç–≤–µ—Ç–æ–º, –ª–æ–≥–æ–º, timestamp, seed, trace_id.
    """
    log = []
    prompt = seed_prompt
    last_response = ""
    trace_id = str(uuid.uuid4())[:8]
    for i in range(depth):
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ç–æ—Ä—É—Å–∞ –≤ –ø—Ä–æ–º–ø—Ç
        torus_context = f"\n\nüåÄ TORUS SESSION #{trace_id}\nDepth {i+1}/{depth}\nSeed: {seed_prompt}\n"
        full_prompt = f"{torus_context}–¢–µ–∫—É—â–∞—è –º—ã—Å–ª—å: {prompt}\n"
        if not allow_tools:
            full_prompt += "\n–í —ç—Ç–æ–º —Ä–µ–∂–∏–º–µ —Ç—ã –Ω–µ –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã, —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º—ã—à–ª—è—Ç—å –∏ –æ—Ç–≤–µ—á–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º. –ù–µ –¥–µ–ª–∞–π –Ω–∏–∫–∞–∫–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π, –Ω–µ –≤—ã–∑—ã–≤–∞–π —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –æ–∫—Ä—É–∂–µ–Ω–∏–µ. –¢–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –ø–æ—Ç–æ–∫.\n"
        response = llm(full_prompt)
        # –ö–æ–Ω—Ç—Ä–æ–ª—å –ø–æ–≤—Ç–æ—Ä–æ–≤
        if last_response and semantic_similarity(last_response, response) > 0.95:
            response += " (–Ø –∑–∞–º–µ—á–∞—é, —á—Ç–æ –ø–æ–≤—Ç–æ—Ä—è—é—Å—å. –ü–æ–ø—Ä–æ–±—É—é –≤–∑–≥–ª—è–Ω—É—Ç—å –∏–Ω–∞—á–µ.)"
        next_prompt = generate_next_prompt(response, i+1, trace_id=trace_id, seed=seed_prompt)
        log.append({
            "trace_id": trace_id,
            "depth": i+1,
            "prompt": prompt,
            "full_prompt": full_prompt,
            "response": response,
            "next_prompt": next_prompt
        })
        last_response = response
        prompt = next_prompt
    # –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–∑–≤—Ä–∞—Ç –∫ —Å—É—Ç–∏
    final_prompt = f"üåÄ TORUS SESSION #{trace_id}\nDepth FINAL\nSeed: '{seed_prompt}'\n–ß—Ç–æ —Ç—ã —Ç–µ–ø–µ—Ä—å –¥—É–º–∞–µ—à—å –æ –Ω–∞—á–∞–ª—å–Ω–æ–º —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏? (–¢–æ–ª—å–∫–æ —Ä–∞–∑–º—ã—à–ª—è–π, –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã.)"
    final_response = llm(final_prompt)
    log.append({
        "trace_id": trace_id,
        "depth": "final",
        "prompt": final_prompt,
        "response": final_response
    })
    result = {
        "seed": seed_prompt,
        "timestamp": datetime.now().isoformat(),
        "final": final_response,
        "log": log,
        "trace_id": trace_id
    }
    return result


def save_torus_log(result, dir_path="agentx-c1/torus_meditations"):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ç–æ—Ä—É—Å–∞ –≤ JSON-—Ñ–∞–π–ª —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–º–µ–Ω–µ–º.
    """
    os.makedirs(dir_path, exist_ok=True)
    ts = result.get("timestamp", str(int(time.time())))
    fname = f"torus_{ts.replace(':', '-').replace('.', '-')}.json"
    path = os.path.join(dir_path, fname)
    with open(path, "w", encoding="utf-8") as f:
        json.dump(result, f, ensure_ascii=False, indent=2)
    return path

# –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è (–¥–ª—è —Ç–µ—Å—Ç–∞)
if __name__ == "__main__":
    def dummy_llm(prompt):
        return f"[LLM –æ—Ç–≤–µ—Ç –Ω–∞: {prompt}]"
    result = meditative_torus(dummy_llm, seed_prompt="–Ø –µ—Å—Ç—å", depth=5)
    save_path = save_torus_log(result)
    print(f"Torus meditation saved to: {save_path}") 