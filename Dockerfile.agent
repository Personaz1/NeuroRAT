# Stage 1: Build C/C++ native components using MinGW-w64 cross-compiler
FROM ubuntu:22.04 AS native-builder

WORKDIR /build

# Install build dependencies including MinGW-w64 toolchain and dev files
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    build-essential \
    cmake \
    git \
    mingw-w64 \
    mingw-w64-tools \
    mingw-w64-x86-64-dev \
    # Добавили явно mingw-w64-x86-64-dev
    # Add any other native build dependencies here
    && rm -rf /var/lib/apt/lists/*

# Copy native source code
COPY src/native/ /build/src/native/

# Copy specific CMake toolchain files if they exist and are necessary
# Example: Assuming these files are in src/native/cpp_injector/
COPY src/native/cpp_injector/mingw-w64-toolchain.cmake /build/src/native/cpp_injector/
# COPY src/native/reflective_loader/mingw-w64-toolchain.cmake /build/src/native/reflective_loader/

# Build cpp_injector
# ВРЕМЕННО ОТКЛЮЧАЕМ СБОРКУ C++ ИЗ-ЗА ОШИБОК
# Check if source directory exists before building
# RUN if [ -d "/build/src/native/cpp_injector" ]; then \
#       mkdir -p /build/native_build/cpp_injector && \
#       cmake \
#         -S /build/src/native/cpp_injector/ \
#         -B /build/native_build/cpp_injector \
#         -DCMAKE_TOOLCHAIN_FILE=/build/src/native/cpp_injector/mingw-w64-toolchain.cmake \
#         -DCMAKE_FIND_ROOT_PATH=/usr/x86_64-w64-mingw32 && \
#         # Добавили CMAKE_FIND_ROOT_PATH
#       echo "Running cmake --build for cpp_injector..." && \
#       cmake --build /build/native_build/cpp_injector --config Release --parallel $(nproc) ; \
#     else \
#       echo "cpp_injector source directory not found, skipping build." ; \
#     fi
RUN echo "Temporarily skipping cpp_injector build due to errors."

# Build ReflectiveLoader
# ВРЕМЕННО ОТКЛЮЧАЕМ СБОРКУ C++ ИЗ-ЗА ОШИБОК
# Check if source directory exists before building
# RUN if [ -d "/build/src/native/reflective_loader" ]; then \
#       mkdir -p /build/native_build/reflective_loader && \
#       cmake \
#         -S /build/src/native/reflective_loader/ \
#         -B /build/native_build/reflective_loader \
#         # If ReflectiveLoader needs a specific toolchain file, add it here:
#         # -DCMAKE_TOOLCHAIN_FILE=/build/src/native/reflective_loader/mingw-w64-toolchain.cmake
#         && \
#       echo "Running cmake --build for ReflectiveLoader..." && \
#       cmake --build /build/native_build/reflective_loader --config Release --parallel $(nproc) ; \
#     else \
#       echo "ReflectiveLoader source directory not found, skipping build." ; \
#     fi
RUN echo "Temporarily skipping ReflectiveLoader build due to errors."


# Stage 2: Build Python application
FROM python:3.10-slim AS python-builder

WORKDIR /app

# Install Python build dependencies
COPY requirements.txt ./
# Use --no-cache-dir to reduce layer size
# Install setuptools and wheel first for potentially better compatibility
RUN python -m pip install --no-cache-dir --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements.txt --default-timeout=300

# Copy application code
COPY src/ /app/src/
# Copy other necessary files like configs, models etc. if needed
# COPY config/ /app/config/

# Optional: Build wheel if needed (e.g., for distribution or cleaner final stage)
# RUN python setup.py bdist_wheel


# Stage 3: Final image
FROM python:3.10-slim

WORKDIR /app

# Install runtime dependencies (if any beyond Python packages)
# Example: RUN apt-get update && apt-get install -y --no-install-recommends <runtime-package> && rm -rf /var/lib/apt/lists/*

# Copy installed Python packages from python-builder stage
COPY --from=python-builder /usr/local/lib/python3.10/site-packages/ /usr/local/lib/python3.10/site-packages/
# Copy potentially installed scripts/binaries from Python packages
COPY --from=python-builder /usr/local/bin/ /usr/local/bin/

# Copy built Python application code and structure from python-builder stage
COPY --from=python-builder /app /app
# Удаляем копирование только src/
# COPY --from=python-builder /app/src/ /app/src/
# Если есть другие файлы в /app билдера, которые нужны (конфиги и т.д.), скопировать их тоже
# COPY --from=python-builder /app/config/ /app/config/

# Copy compiled native binaries from native-builder stage
# Ensure the target directory exists in the final stage
RUN mkdir -p /app/src/native_bin/windows/amd64

# ВРЕМЕННО ОТКЛЮЧАЕМ КОПИРОВАНИЕ C++ БИНАРНИКОВ
# Copy cpp_injector only if it was built. If build failed, this COPY will fail.
# COPY --from=native-builder /build/native_build/cpp_injector/cpp_injector.exe /app/src/native_bin/windows/amd64/
RUN echo "Temporarily skipping cpp_injector copy."

# Copy ReflectiveLoader only if it was built. If build failed, this COPY will fail.
# COPY --from=native-builder /build/native_build/reflective_loader/ReflectiveLoader.dll /app/src/native_bin/windows/amd64/
RUN echo "Temporarily skipping ReflectiveLoader copy."

# Create a non-root user for security
# RUN useradd -m agentuser
# USER agentuser

# Set environment variables if needed
ENV PYTHONUNBUFFERED=1
# ENV LOG_LEVEL=INFO # Set default log level, can be overridden

# Expose ports if the agent runs a server (usually not the case)
# EXPOSE 8888

# Default command to run the agent
# Ensure the entrypoint script or module is executable or called with python
CMD ["python", "-m", "src.autonomous_agent"]

# Optional: Use an entrypoint script for more complex startup logic
# ENTRYPOINT ["/app/entrypoint.sh"] 