#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Демонстрационный скрипт для модуля ExploitAutomation.

Этот скрипт демонстрирует возможности модуля ExploitAutomation
для автоматического поиска и эксплуатации уязвимостей в сети.
Работает в безопасном режиме без реальной эксплуатации.
"""

import os
import sys
import json
import time
import argparse
from datetime import datetime

from src.exploit_automation import ExploitAutomation

def parse_arguments():
    """Разбор аргументов командной строки."""
    parser = argparse.ArgumentParser(description='Демонстрация автоматизации эксплойтов')
    
    parser.add_argument('--target', '-t', type=str, default='192.168.1.0/24',
                        help='Целевая сеть в формате CIDR (по умолчанию: 192.168.1.0/24)')
    
    parser.add_argument('--concurrency', '-c', type=int, default=5,
                        help='Максимальное количество одновременных потоков (по умолчанию: 5)')
    
    parser.add_argument('--unsafe', action='store_true',
                        help='Отключить безопасный режим (ОПАСНО: может выполнить реальные эксплойты)')
    
    parser.add_argument('--report', '-r', type=str, default='exploit_report.json',
                        help='Путь для сохранения отчета (по умолчанию: exploit_report.json)')
    
    parser.add_argument('--verbose', '-v', action='store_true',
                        help='Подробный вывод процесса сканирования')
    
    return parser.parse_args()

def print_banner():
    """Выводит баннер программы."""
    banner = """
    ███████╗██╗  ██╗██████╗ ██╗      ██████╗ ██╗████████╗
    ██╔════╝╚██╗██╔╝██╔══██╗██║     ██╔═══██╗██║╚══██╔══╝
    █████╗   ╚███╔╝ ██████╔╝██║     ██║   ██║██║   ██║   
    ██╔══╝   ██╔██╗ ██╔═══╝ ██║     ██║   ██║██║   ██║   
    ███████╗██╔╝ ██╗██║     ███████╗╚██████╔╝██║   ██║   
    ╚══════╝╚═╝  ╚═╝╚═╝     ╚══════╝ ╚═════╝ ╚═╝   ╚═╝   
                                                         
     █████╗ ██╗   ██╗████████╗ ██████╗ ███╗   ███╗ █████╗ ████████╗██╗ ██████╗ ███╗   ██╗
    ██╔══██╗██║   ██║╚══██╔══╝██╔═══██╗████╗ ████║██╔══██╗╚══██╔══╝██║██╔═══██╗████╗  ██║
    ███████║██║   ██║   ██║   ██║   ██║██╔████╔██║███████║   ██║   ██║██║   ██║██╔██╗ ██║
    ██╔══██║██║   ██║   ██║   ██║   ██║██║╚██╔╝██║██╔══██║   ██║   ██║██║   ██║██║╚██╗██║
    ██║  ██║╚██████╔╝   ██║   ╚██████╔╝██║ ╚═╝ ██║██║  ██║   ██║   ██║╚██████╔╝██║ ╚████║
    ╚═╝  ╚═╝ ╚═════╝    ╚═╝    ╚═════╝ ╚═╝     ╚═╝╚═╝  ╚═╝   ╚═╝   ╚═╝ ╚═════╝ ╚═╝  ╚═══╝
    """
    print(banner)
    print(f"Демонстрация автоматизации поиска и эксплуатации уязвимостей")
    print(f"Запущено: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
    print("-" * 80)

def print_status(message, is_verbose=False, is_important=False):
    """Выводит статусные сообщения с форматированием."""
    if is_important:
        print(f"\n[+] {message}")
    elif is_verbose:
        print(f"  [-] {message}")

def run_demo():
    """Запускает демонстрацию автоматизации эксплойтов."""
    args = parse_arguments()
    
    print_banner()
    
    # Предупреждение при отключении безопасного режима
    if args.unsafe:
        print("⚠️  ВНИМАНИЕ: Безопасный режим отключен. Могут выполняться реальные эксплойты!")
        print("⚠️  Это может привести к нежелательным последствиям для целевых систем.")
        print("⚠️  Рекомендуется использовать только в тестовой среде с разрешением владельца.")
        print("-" * 80)
        time.sleep(3)  # Даем время прочитать предупреждение
    
    # Инициализация модуля автоматизации
    print_status("Инициализация модуля автоматизации эксплойтов...", is_important=True)
    automation = ExploitAutomation(
        target_range=args.target,
        concurrency=args.concurrency,
        safe_mode=not args.unsafe
    )
    print_status(f"Целевая сеть: {args.target}", is_verbose=args.verbose)
    print_status(f"Параллельных потоков: {args.concurrency}", is_verbose=args.verbose)
    print_status(f"Безопасный режим: {'ОТКЛЮЧЕН' if args.unsafe else 'ВКЛЮЧЕН'}", is_verbose=args.verbose)
    
    # Запуск автоматического сканирования
    print_status("Запуск автоматического сканирования...", is_important=True)
    start_time = time.time()
    results = automation.auto_scan()
    scan_time = time.time() - start_time
    
    # Вывод результатов сканирования
    print_status(f"Сканирование завершено за {scan_time:.2f} секунд", is_important=True)
    print_status(f"Обнаружено живых хостов: {len(results['live_hosts'])}", is_verbose=True)
    
    total_open_ports = sum(len(ports) for ports in results['open_ports'].values())
    print_status(f"Обнаружено открытых портов: {total_open_ports}", is_verbose=True)
    
    total_exploits = sum(
        len(exploits) for host, ports in results['exploits_to_run'].items()
        for port, exploits in ports.items()
    )
    print_status(f"Подобрано эксплойтов: {total_exploits}", is_verbose=True)
    
    # Запуск автоматической эксплуатации
    print_status("Запуск автоматической эксплуатации...", is_important=True)
    start_time = time.time()
    exploitation_results = automation.auto_exploit()
    exploit_time = time.time() - start_time
    
    # Вывод результатов эксплуатации
    print_status(f"Эксплуатация завершена за {exploit_time:.2f} секунд", is_important=True)
    
    total_successful = sum(
        len(exploits) for host, ports in exploitation_results['successful_exploits'].items()
        for port, exploits in ports.items()
    )
    print_status(f"Успешно эксплуатировано уязвимостей: {total_successful}", is_verbose=True)
    
    # Генерация отчета
    print_status(f"Генерация отчета в {args.report}...", is_important=True)
    report = automation.report(args.report)
    print_status("Отчет успешно сгенерирован", is_verbose=True)
    
    # Итоговая статистика
    print("\n" + "=" * 80)
    print(f"ИТОГИ ДЕМОНСТРАЦИИ")
    print(f"• Просканировано: {args.target}")
    print(f"• Обнаружено хостов: {len(results['live_hosts'])}")
    print(f"• Открытых портов: {total_open_ports}")
    print(f"• Подобрано эксплойтов: {total_exploits}")
    print(f"• Успешно эксплуатировано: {total_successful}")
    print(f"• Общее время: {scan_time + exploit_time:.2f} секунд")
    print(f"• Отчет сохранен в: {args.report}")
    print("=" * 80)
    
    print(f"\nПримеры найденных уязвимостей:")
    vulnerable_hosts = 0
    for host, ports in results['vulnerabilities'].items():
        if ports:
            vulnerable_hosts += 1
            if vulnerable_hosts <= 3:  # Показываем только первые 3 хоста
                print(f"\nХост {host}:")
                for port, vulns in ports.items():
                    service = results['detected_services'].get(host, {}).get(port, "unknown")
                    print(f"  Порт {port} ({service}):")
                    for i, vuln in enumerate(vulns[:3]):  # Показываем только первые 3 уязвимости
                        print(f"    - {vuln.get('id', 'Unknown ID')}: {vuln.get('description', 'No description')}")
                    if len(vulns) > 3:
                        print(f"    - ... и еще {len(vulns) - 3} уязвимостей")
    
    if vulnerable_hosts > 3:
        print(f"... и еще {vulnerable_hosts - 3} хостов с уязвимостями")
    
    if total_successful > 0:
        print(f"\nПримеры успешных эксплойтов:")
        successful_hosts = 0
        for host, ports in exploitation_results['successful_exploits'].items():
            if any(len(exploits) > 0 for port, exploits in ports.items()):
                successful_hosts += 1
                if successful_hosts <= 3:  # Показываем только первые 3 хоста
                    print(f"\nХост {host}:")
                    for port, exploits in ports.items():
                        if exploits:
                            service = results['detected_services'].get(host, {}).get(port, "unknown")
                            print(f"  Порт {port} ({service}):")
                            for i, exploit in enumerate(exploits[:3]):  # Показываем только первые 3 эксплойта
                                print(f"    + {exploit.get('id', 'Unknown ID')}: {exploit.get('name', 'No name')}")
                            if len(exploits) > 3:
                                print(f"    + ... и еще {len(exploits) - 3} эксплойтов")
        
        if successful_hosts > 3:
            print(f"... и еще {successful_hosts - 3} хостов с успешными эксплойтами")

if __name__ == "__main__":
    try:
        run_demo()
    except KeyboardInterrupt:
        print("\n\nОперация прервана пользователем.")
        sys.exit(0)
    except Exception as e:
        print(f"\n\nОшибка: {str(e)}")
        sys.exit(1) 