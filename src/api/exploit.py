from fastapi import APIRouter, HTTPException, Depends
from pydantic import BaseModel
from src.common.utils import get_logger
from src.c1_exploit_integration import C1ExploitIntegration
from src.channel_manager import ChannelManager
from typing import Dict, Any, Optional

router = APIRouter(prefix="/exploit", tags=["Exploit"])
logger = get_logger("exploit_api")

# Инициализация модуля интеграции эксплойтов для использования в API
integration = C1ExploitIntegration(safe_mode=True)

class ScanRequest(BaseModel):
    target_range: str
    safe_mode: bool = True
    concurrency: int = 10

class ExploitRequest(BaseModel):
    target_hosts: list[str]
    safe_mode: bool = True

@router.post("/scan")
def scan_network(req: ScanRequest):
    try:
        integration.set_safe_mode(safe_mode=req.safe_mode)
        results = integration.scan_network(target_range=req.target_range, concurrency=req.concurrency)
        return {"live_hosts": results.get('live_hosts'), "vulnerabilities": results.get('vulnerabilities')}
    except Exception as e:
        logger.error(f"Error during scan: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.post("/exploit")
def exploit_vulnerabilities(req: ExploitRequest):
    try:
        integration.set_safe_mode(safe_mode=req.safe_mode)
        exploitation_results = integration.exploit_vulnerabilities(target_hosts=req.target_hosts)
        return {"successful_exploits": exploitation_results.get('successful_exploits')}
    except Exception as e:
        logger.error(f"Error during exploit: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

@router.get("/report")
def generate_report(include_details: bool = True):
    try:
        result = integration.generate_report(include_details=include_details)
        return result
    except Exception as e:
        logger.error(f"Error generating report: {e}", exc_info=True)
        raise HTTPException(status_code=500, detail=str(e))

# Эндпоинт установки safe_mode
class SafeModeRequest(BaseModel):
    safe_mode: bool

@router.post("/safe_mode")
def set_safe_mode(req: SafeModeRequest):
    return integration.set_safe_mode(safe_mode=req.safe_mode)

# Эндпоинт получения деталей конкретной уязвимости
@router.get("/vulnerability/{vuln_id}")
def get_vulnerability_details(vuln_id: str):
    return integration.get_vulnerability_details(vuln_id=vuln_id)

# Эндпоинт получения деталей конкретного эксплойта
@router.get("/exploit/{exploit_id}")
def get_exploit_details(exploit_id: str):
    return integration.get_exploit_details(exploit_id=exploit_id) 