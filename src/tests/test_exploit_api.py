import pytest
from fastapi.testclient import TestClient
from src.api.app import app
import src.api.exploit as exploit_module
from unittest.mock import patch, MagicMock

client = TestClient(app)

@pytest.fixture(autouse=True)
def stub_integration(monkeypatch):
    # Заглушки для методов C1ExploitIntegration
    dummy_scan = {"live_hosts": ["127.0.0.1"], "vulnerabilities": {"127.0.0.1": {}}}
    dummy_exploit = {"successful_exploits": {"127.0.0.1": {}}}
    dummy_report = {"status": "success", "report": {"scan_summary": {}}, "report_path": "exploit_report.json"}
    dummy_vuln = {"status": "error", "message": "No scan results available. Run scan_network first."}
    dummy_exploit_det = {"status": "error", "message": "No scan results available. Run scan_network first."}
    monkeypatch.setattr(exploit_module.integration, "scan_network", lambda target_range, concurrency: dummy_scan)
    monkeypatch.setattr(exploit_module.integration, "exploit_vulnerabilities", lambda target_hosts=None: dummy_exploit)
    monkeypatch.setattr(exploit_module.integration, "generate_report", lambda include_details=True: dummy_report)
    monkeypatch.setattr(exploit_module.integration, "set_safe_mode", lambda safe_mode=True: {"status": "success", "safe_mode": safe_mode})
    monkeypatch.setattr(exploit_module.integration, "get_vulnerability_details", lambda vuln_id: dummy_vuln)
    monkeypatch.setattr(exploit_module.integration, "get_exploit_details", lambda exploit_id: dummy_exploit_det)


def test_scan_endpoint():
    response = client.post(
        "/exploit/scan", json={"target_range": "127.0.0.1/32", "safe_mode": True, "concurrency": 1}
    )
    assert response.status_code == 200
    data = response.json()
    assert data.get("live_hosts") == ["127.0.0.1"]
    assert isinstance(data.get("vulnerabilities"), dict)


def test_exploit_endpoint():
    response = client.post(
        "/exploit/exploit", json={"target_hosts": ["127.0.0.1"], "safe_mode": True}
    )
    assert response.status_code == 200
    data = response.json()
    assert isinstance(data.get("successful_exploits"), dict)


def test_report_endpoint():
    response = client.get("/exploit/report?include_details=false")
    assert response.status_code == 200
    data = response.json()
    assert data.get("status") == "success"
    assert "report_path" in data


def test_safe_mode_endpoint():
    response = client.post("/exploit/safe_mode", json={"safe_mode": False})
    assert response.status_code == 200
    assert response.json().get("safe_mode") is False


def test_get_vulnerability_details_endpoint():
    response = client.get("/exploit/vulnerability/CVE-TEST")
    assert response.status_code == 200
    data = response.json()
    assert data.get("status") == "error"


def test_get_exploit_details_endpoint():
    response = client.get("/exploit/exploit/EXP-TEST")
    assert response.status_code == 200
    data = response.json()
    assert data.get("status") == "error" 